<?php
// $Id: nd.module,v 1.1.2.123.2.3 2009/11/26 09:36:00 swentel Exp $

/**
 * @file
 * Node displays.
 */

/**
 * Implementation of hook_nodeapi().
 */
function nd_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  // Do not touch anything when all for node type is excluded
  $exclude = variable_get('nd_buildmodes_exclude',array());
  if ($exclude[$node->type]['ds_block_all']) return;
  switch ($op) {
    // Add has body property.
    case 'load':
      $node->has_body = node_get_types('type', $node->type)->has_body;
      break;

    // Determine build mode.
    case 'view':
      if ($node->build_mode == NODE_BUILD_RSS && !$exclude[$node->type]['nd_rss']) {
        // For the RSS build mode, we need to manipulate right now.
        _nd_nodeapi($node);
      }
      elseif ($node->build_mode == NODE_BUILD_PREVIEW) {
        if ($teaser && !$exclude[$node->type]['nd_teaser']) {
          $node->build_mode = 'nd_teaser';
        } elseif (empty($teaser) && !$exclude[$node->type]['nd_full']) {
          $node->build_mode = 'nd_full'; 
        }
        $node->has_body = node_get_types('type', $node->type)->has_body;
      }
      elseif ($node->build_mode === NODE_BUILD_NORMAL) {
        if ($page && !$exclude[$node->type]['nd_page']) {
          $node->build_mode = 'nd_page';
        } elseif ($teaser && !$exclude[$node->type]['nd_teaser']) {
          $node->build_mode = 'nd_teaser';
        } elseif (empty($teaser) && !$exclude[$node->type]['nd_full']) {
          $node->build_mode = 'nd_full'; 
        } // if no conditions meet, leave build build mode as normal 
      }

      if (in_array($node->build_mode,array('nd_full','nd_teaser')) && $node->sticky) {
        $node->build_mode = 'nd_sticky';
      }
      break;

    // Alter the node object for viewing.
    case 'alter':
      if (!$exclude[$node->type][$node->build_mode]) _nd_nodeapi($node);
      break;
  }
}

/**
 * Helper function to alter node properties
 *
 * @param stdClass $node The complete node object.
 */
function _nd_nodeapi(&$node) {

  // Build fiels and regions.
  
  //remove fieldsets
  if (module_exists('fieldgroup')) {
    foreach (fieldgroup_groups($node->type) as $group) {
      $group_name = $group['group_name'];
      if (is_array($node->content[$group_name])) {
        foreach($node->content[$group_name]['group'] as $field=>$field_data) {
          $node->content[$field] = $field_data ;  
        }
        unset($node->content[$group_name]);
      }
    }  
  }

  ds_build_fields_and_regions($node, 'nd');

  // Special support for RSS.
  if ($node->build_mode == NODE_BUILD_RSS && $node->render_by_ds == TRUE) {
    $node->content['body']['#access'] = FALSE;
    foreach (element_children($node->content) as $key => $field) {
      if (!isset($node->ds_fields[$field])) {
        $node->content[$field]['#access'] = FALSE;
      }
      elseif (isset($node->ds_fields[$field]) && $node->ds_fields[$field]['type'] == 'nd') {
        $key = $field .'_rendered';
        $field_key = strtr($key, '_', '-');
        $node->content[$field]['#value'] = theme('ds_field', $node->{$key}, $field, $node->ds_fields[$field]);
      }
    }
  }
}

/**
 * Implementation of moduleName_preprocess_hook().
 * The node data will be rendered in regions. This uses a helper function
 * so themers/developers can call that helper function from within
 * their preprocess_hooks if they are fiddling with some data. For information
 * about this decision see http://drupal.org/node/570592 (issue) and
 * http://drupal.org/node/572614 for information on howto implement.
 */
function nd_preprocess_node(&$vars, $hook) {
  if (!variable_get('nd_preprocess_override', FALSE)) {
    _nd_preprocess_node($vars, $hook);
  }
}

/**
 * Helper function used in either nd_preprocess_node or other preprocess function.
 */
function _nd_preprocess_node(&$vars, $hook) {

  $node = $vars['node'];

  // Add node-content_type-build_mode(-nid) template suggestion.
  $vars['template_files'][] = 'node-'. $node->type .'-'. $node->build_mode;
  $vars['template_files'][] = 'node-'. $node->type .'-'. $node->build_mode .'-'. $node->nid;

  // Break all the rendering if needed.
  if (!$node->render_by_ds) {
    return;
  }

  $content = ds_render_content($node, 'nd', $vars);
  $vars['content'] = $content;
}

/**
 * Implementation of hook_content_build_modes().
 */
function nd_content_build_modes() {
  $build_modes = array(
    'nd_page' => array(
      'title' => t('Node page'),
      'weight' => -1,
      'build modes' => array(
        'nd_page' => array(
          'title' => t('Node page (nd)'),
          'views style' => true,
        ),
      ),
    ),
    'nd_full' => array(
      'title' => t('Full'),
      'weight' => 1,
      'build modes' => array(
        'nd_full' => array(
          'title' => t('Full node (nd)'),
          'views style' => true,
        ),
      ),
    ),    
    'nd_teaser' => array(
      'title' => t('Teaser'),
      'weight' => 2,
      'build modes' => array(
        'nd_teaser' => array(
          'title' => t('Teaser (nd)'),
          'views style' => true,
        ),
      ),
    ),
    'nd_sticky' => array(
      'title' => t('Sticky'),
      'weight' => 3,
      'build modes' => array(
        'nd_sticky' => array(
          'title' => t('Sticky (nd)'),
          'views style' => true,
        ),
      ),
    ),
    'nd_rss' => array(
      'title' => t('RSS'),
      'weight' => 4,
      'build modes' => array(
        'nd_rss' => array(
          'title' => t('RSS (nd)'),
          'views style' => true,
        ),
      ),
    ),
  );

  return $build_modes;
}

/**
 * Implementation of hook_ds_api().
 */
function nd_ds_api() {

  $help = '<ul>
    <li>This module comes with a node.tpl.php and content-field.tpl.php file (when using nd_cck) , available in the templates folder, which both are optimized for use with Node Displays. Copy the file to your themes folder so you can use it or look into the file and make changes to your own version.</li>
    <li>You can create a file called <strong>node-<em>node_type</em>-<em>build_mode</em>.tpl.php</strong> or <strong>node-<em>node_type</em>-<em>build_mode</em>-<em>nid</em>.tpl.php</strong> for even more fine-grained theming.</li>
    <li>If you exclude the RSS build mode, the default node feed is generated, but might render strange content. Make sure you do not choose the "Titles only" as your feed content setting, otherwhise, this screen will not have any effect. Choosing either "Full text" or "Titles + teaser" does not matter, this screen will have effect on both settings, apart from the read more link. Remember that some fields like upload and terms are added automatically to the feed and that this manipulates the $description variable, it does not add extra keys to the feed.</li>
    </ul>';

  return array(
    'title' => 'Node displays',
    'module' => 'nd',
    'object' => 'node',
    'views_base' => 'node',
    'types' => 'node_get_types',
    'extra' => array('has_body'),
    'plugins_exclude' => array(NODE_BUILD_RSS),
    'regions_single' => array(NODE_BUILD_RSS),
    'help' => t($help),
  );
}

/**
 * Implementation of hook_theme().
 */
function nd_theme() {
 $theme_functions = array();

  // Formatter theming functions.
  $formatters = array(
    'nd_bodyfield_teaser', 'nd_bodyfield_full', 'nd_title_h1_nolink', 'nd_title_h1_link',
    'nd_title_h2_nolink', 'nd_title_h2_link', 'nd_title_h2_block_nolink', 'nd_title_h2_block_link',
    'nd_title_p_nolink', 'nd_title_p_link',
  );

  foreach ($formatters as $formatter) {
    $theme_functions[$formatter] = array(
      'arguments' => array('node' => NULL),
    );
  }

  return $theme_functions;
}

/**
 * Implementation of hook_ds_buildmodes_alter().
 */
function nd_ds_buildmodes_alter(&$build_modes) {
  $build_modes['nd']['full']['weight'] = -1;
}

/**
 * Implementation of hook_ds_fields().
 */
function nd_ds_fields($type_name, $build_mode, $extra) {

  $fields = array(
    'title' => array(
      'title' => t('Title'),
      'formatters' => array(
        'nd_title_h1_nolink' => t('H1 title'),
        'nd_title_h1_link' => t('H1 title, linked to node'),
        'nd_title_h2_nolink' => t('H2 title'),
        'nd_title_h2_link' => t('H2 title, linked to node'),
        'nd_title_h2_block_nolink' => t('H2 block title'),
        'nd_title_h2_block_link' => t('H2 block title, linked to node'),
        'nd_title_p_nolink' => t('Paragraph title'),
        'nd_title_p_link' => t('Paragraph title, linked to node'),
      ),
      'type' => DS_FIELD_THEME,
    ),
    'author' => array(
      'title' => t('Author'),
      'formatters' => array(
        'ds_author_nolink' => t('Author'),
        'ds_author_link' => t('Author linked to profile')
      ),
      'type' => DS_FIELD_THEME,
    ),
    'links' => array(
      'title' => t('Links'),
      'type' => DS_FIELD_PREPROCESS,
    ),
    'read_more' => array(
      'title' => t('Read more'),
      'code' => '<?php echo l(t("Read more"), "node/$object->nid"); ?>',
      'type' => DS_FIELD_OVERRIDABLE,
    ),
    'post_date' => array(
      'title' => t('Post date'),
      'code' => '<?php echo format_date($object->created, "custom", "d/m/Y"); ?>',
      'type' => DS_FIELD_OVERRIDABLE,
    ),
  );

  // Check for body.
  if ($extra['has_body'] == TRUE) {
    $fields['body'] = array(
      'title' => t('Core body'),
      'formatters' => array(
        'nd_bodyfield_teaser' => t('Teaser'),
        'nd_bodyfield_full' => t('Full')
      ),
      'type' => DS_FIELD_THEME,
    );
  }

  if (module_exists('taxonomy')) {
    $fields['terms'] = array(
      'title' => t('Taxonomy'),
      'type' => DS_FIELD_PREPROCESS,
    );
  }

  if (module_exists('upload') && $build_mode != 'teaser' && variable_get("upload_$type_name", 1)) {
    $fields['files'] = array(
      'title' => t('Core upload'),
      'type' => DS_FIELD_IGNORE,
    );
  }

  return array('nd' => $fields);
}

/**
 * ND theming functions.
 */
function theme_nd_bodyfield_teaser(&$node) {
  $node->body_rendered = truncate_utf8($node->content['body']['#value'], variable_get('teaser_length', 600), TRUE);
}

function theme_nd_bodyfield_full(&$node) {
  $node->body_rendered = $node->content['body']['#value'];
}

function theme_nd_title_h1_nolink(&$node) {
  $node->title_rendered = '<h1>'. check_plain($node->title) .'</h1>';
}

function theme_nd_title_h1_link(&$node) {
  $node->title_rendered = '<h1>'. l($node->title, 'node/'. $node->nid) .'</h1>';
}

function theme_nd_title_h2_nolink(&$node) {
  $node->title_rendered = '<h2>'. check_plain($node->title) .'</h2>';
}

function theme_nd_title_h2_link(&$node) {
  $node->title_rendered = '<h2>'. l($node->title, 'node/'. $node->nid) .'</h2>';
}

function theme_nd_title_h2_block_nolink(&$node) {
  $node->title_rendered = '<h2 class="block-title">'. check_plain($node->title) .'</h2>';
}

function theme_nd_title_h2_block_link(&$node) {
  $node->title_rendered = '<h2 class="block-title">'. l($node->title, 'node/'. $node->nid) .'</h2>';
}

function theme_nd_title_p_nolink(&$node) {
  $node->title_rendered = '<p>'. check_plain($node->title) .'</p>';
}

function theme_nd_title_p_link(&$node) {
  $node->title_rendered = '<p>'. l($node->title, 'node/'. $node->nid) .'</p>';
}
