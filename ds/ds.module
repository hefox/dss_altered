<?php
// $Id: ds.module,v 1.1.2.16 2009/11/28 22:39:15 swentel Exp $

/**
 * Core functions for the Display Suite module.
 */

/**
 * Constants for field types.
 */
define('DS_FIELD_THEME', 1);
define('DS_FIELD_FUNCTION', 2);
define('DS_FIELD_PREPROCESS', 3);
define('DS_FIELD_IGNORE', 4);
define('DS_FIELD_CUSTOM', 5);
define('DS_FIELD_OVERRIDABLE', 6);
define('DS_FIELD_OVERRIDDEN', 7);
define('DS_FIELD_BLOCK', 8);

/**
 * Constants for content field default values
 */
define('DS_DEFAULT_REGION', 'disabled');
define('DS_DEFAULT_FORMAT', 'default');
define('DS_DEFAULT_LABEL_FORMAT', 'hidden');
define('DS_DEFAULT_WEIGHT', -19);

/**
 * Constants for block fields rendering.
 */
define('BLOCK_TEMPLATE', 1);
define('BLOCK_TITLE_CONTENT', 2);
define('BLOCK_CONTENT', 3);

/**
 * Implementation of hook_init().
 */
function ds_init() {
  drupal_add_css(drupal_get_path('module', 'ds') .'/css/regions.css');
}

/**
 * Implementation of hook_menu().
 */
function ds_menu() {
  require_once('includes/ds.registry.inc');
  return _ds_menu();
}

/**
 * Implementation of hook_theme().
 */
function ds_theme() {
  require_once('includes/ds.registry.inc');
  return _ds_theme();
}

/**
 * Implementation of hook_views_api().
 */
function ds_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'ds') .'/views',
  );
}

/**
 * Implementation of hook_ds_plugins().
 */
function ds_ds_plugins() {
  require_once('includes/ds.registry.inc');
  return _ds_plugins();
}

/**
 * Implementation of hook_features_api().
 */
function ds_features_api() {
  require_once('includes/ds.features.inc');
  return _ds_features_api();
}

/**
 * Get fields and regions for an object.
 *
 * @param stdClass $object The object to manipulate.
 * @param string $module The module that is requesting.
 */
function ds_build_fields_and_regions(&$object, $module) {

  static $api_info = array();

  if (!isset($api_info[$module])) {
    // Gather information.
    $function = $module .'_ds_api';
    $api_data = $function();
    // Extra info.
    if (isset($api_data['extra'])) {
      $extra = array();
      $types = $api_data['types']();
      $type_info = $types[$object->type];
      foreach ($api_data['extra'] as $key) {
        $extra[$key] = $type_info->{$key};
      }
    }
    $api_info[$module]['extra'] = $extra;
  }

  $extra = $api_info[$module]['extra'];

  // See if rendering is needed later on.
  // There are two ways of excluding: global exclude on content type
  // or per build mode per content type.
  // We don't return here, because we want to add all fields on the object
  // so themers can use it in their template.
  $exclude_build_modes = variable_get($module .'_buildmodes_exclude', array());
  $object->render_by_ds = ((isset($exclude_build_modes[$object->type][$object->build_mode])
    && $exclude_build_modes[$object->type][$object->build_mode] == TRUE) ||
    variable_get($module .'_type_'. $object->type, FALSE) == TRUE) ? FALSE : TRUE;

  $regions = array();
  $ds_fields = array();
  $ds_preprocess_fields = array();
  $display_settings = variable_get($module .'_display_settings_'. $object->type, array());

  // Get all fields and settings for this build mode.
  $fields = ds_get_fields($module, $object->type, $object->build_mode, $extra);
  $field_settings = ds_default_value($display_settings, $object->build_mode, 'fields');

  if (!empty($fields)) {
    foreach ($fields as $key => $field) {

      // Exclude now depends on the region, previous it was an exclude property.
      $region = (isset($field_settings[$key]['region'])) ? $field_settings[$key]['region'] : DS_DEFAULT_REGION;

      if ($region != 'disabled') {
        $weight = (isset($field_settings[$key]['weight'])) ? $field_settings[$key]['weight'] : DS_DEFAULT_WEIGHT;
        $object->content[$key]['#weight'] = $weight;
        $regions[$region][$key] = $weight;
        $ds_fields[$key] = array(
          'key' => $key,
          'title' => $field['title'],
          'labelformat' => (isset($field_settings[$key]['labelformat'])) ? $field_settings[$key]['labelformat'] : DS_DEFAULT_LABEL_FORMAT,
          'type' => isset($field['display_settings']) ? 'other' : 'ds',
        );

        // If the field has the storage key, it means the theming is done in that module.
        if (isset($field['storage'])) {
          continue;
        }

        // Theming can either be done in preprocess, or with a custom funtion or an
        // existing formatter theming function. For a custom function we'll pass
        // on the $object object, the field name and the complete field array.
        switch ($field['type']) {
          case DS_FIELD_PREPROCESS:
          case DS_FIELD_IGNORE:
            $ds_preprocess_fields[$key] = $field['type'];
            break;
          case DS_FIELD_CUSTOM:
          case DS_FIELD_OVERRIDABLE:
          case DS_FIELD_OVERRIDDEN:
            ds_eval_code($key, $field, $object, 'node');
            break;
          case DS_FIELD_BLOCK:
            ds_eval_block($key, $field, $object, 'node');
            break;
          case DS_FIELD_FUNCTION:
            if (isset($field['file'])) {
              include_once($field['file']);
            }
            $function = (isset($field_settings[$key]['format'])) ? $field_settings[$key]['format'] : key($field['formatters']);
            $function($object, $key, $field);
            break;
          case DS_FIELD_THEME:
            $format = (isset($field_settings[$key]['format'])) ? $field_settings[$key]['format'] : key($field['formatters']);
            theme($format, $object);
            break;
        }
      }
    }
  }

  // Add fields and regions to the object.
  // Also reset render_by_ds property if needed.
  $object->ds_fields = $ds_fields;
  $object->regions = $regions;
  $object->preprocess_fields = $ds_preprocess_fields;
  if (empty($regions)) {
    $object->render_by_ds = FALSE;
  }
}

/**
 * Render content for an object.
 *
 * @param stdClass $object The object to manipulate.
 * @param string $module The module that is requesting.
 * @param array $vars The variables need for rendering.
 * @param $theme_function The theming function for a field.
 */
function ds_render_content($object, $module, $vars, $theme_function = 'ds_field') {

  static $api_info = array();

  if (!isset($api_info[$module])) {
    // Gather information.
    $function = $module .'_ds_api';
    $api_data = $function();
    $api_info[$module] = $api_data;
  }
  $display_settings = variable_get($module .'_display_settings_'. $object->type, array());

  $all_regions = ds_regions('all', TRUE);
  $regions = $vars['regions'];
  $themed_regions = array();

  // Create key_rendered fields from DS_FIELD_PREPROCESS and DS_FIELD_IGNORE types.
  if (!empty($object->preprocess_fields)) {
    foreach ($object->preprocess_fields as $key => $type) {
      switch ($type) {
        case DS_FIELD_PREPROCESS:
          $field_key = $key .'_rendered';
          $vars[$field_key] = $vars[$key];
          unset($vars[$key]);
          break;
        case DS_FIELD_IGNORE:
          $field_key = $key .'_rendered';
          $vars[$field_key] = $object->content[$key]['#value'];
          break;
      }
    }
  }

  // Loop through all regions and content and classes.
  $region_classes = array();
  foreach ($all_regions as $region_name => $region_title) {

    if (isset($regions[$region_name])) {
      $region_content = '';
      $region = $regions[$region_name];

      // Loop through all fields after ordering on weight.
      asort($region);
      foreach ($region as $key => $weight) {
        $field_content = isset($vars[$key .'_rendered']) ? $vars[$key .'_rendered'] : '';
        if (!empty($field_content)) {
          $field_key = strtr($key, '_', '-');
          $region_content .= theme($theme_function, $field_content, $field_key, $object->ds_fields[$key]);
        }
        unset($object->content[$key]);
      }

      // Render region.
      if (!empty($region_content)) {
        if ($region_name == 'left' || $region_name == 'right') {
          $region_classes[$region_name] = $region_name;
        }
        $themed_regions[$region_name] = array('content' => $region_content);
      }
    }
  }

  $object_display = new stdClass();
  $object_display->all_regions = $all_regions;
  $object_display->themed_regions = $themed_regions;
  $object_display->region_classes = $region_classes;

  // Plugins.
  ds_plugins_process($module, $api_info[$module]['object'], $display_settings, $vars, $object_display);

  // Add classes based on regions.
  $ds_middle_classes = 'no-sidebars';
  if (isset($object_display->region_classes['left']) && isset($object_display->region_classes['right'])) {
    $ds_middle_classes = 'two-sidebars';
  }
  elseif (isset($object_display->region_classes['left'])) {
    $ds_middle_classes = 'one-sidebar sidebar-left';
  }
  elseif (isset($object_display->region_classes['right'])) {
    $ds_middle_classes = 'one-sidebar sidebar-right';
  }

  // Build the $content variable.
  $content = '';
  foreach ($object_display->themed_regions as $region_name => $region_data) {
    $content .= '<div class="ds-region-'. $region_name;
    if ($region_name == 'middle') {
      $content .= ' '. $ds_middle_classes;
    }
    if (isset($region_data['extra_class'])) {
      $content .= $region_data['extra_class'];
    }
    $content .= '" ';
    if (isset($region_data['inline_css'])) {
      $content .= $region_data['inline_css'];
    }
    $content .= '><div class="ds-region-inner">'. $region_data['content'] .'</div></div>';
  }
  return $content;
}

/**
 * Return a value or return the default if empty.
 *
 * @param array $settings The settings loaded for a type.
 * @param string $build_mode The name of the build mode.
 * @param string $type The name of the type to search (ie fields, regions)
 * @param string $key The name of the key to search in $type.
 * @param string $search_key The name of the key to search in $key.
 * @param string $default The default value.
 * @param mixed default value.
 */
function ds_default_value($settings, $build_mode, $type, $key = NULL, $search_key = NULL, $default = NULL) {
  if ($key == NULL)
  return (isset($settings[$build_mode][$type])) ? $settings[$build_mode][$type] : NULL;
  else
  return (isset($settings[$build_mode][$type][$key][$search_key])) ? $settings[$build_mode][$type][$key][$search_key] : $default;
}

/**
 * API function to get fields.
 *
 * @param string $module The name of the module.
 * @param string $type_name The name of object (ie, page or story for node types, profile for users)
 * @param string $build_mode The build mode.
 * @param array $extra Extra properties we might want to check on (ie has_body property).
 * @param array $reset Whether we need to reset the fields cache or not.
 * @return array of fields.
 */
function ds_get_fields($module, $type_name, $build_mode, $extra = array(), $reset = FALSE) {
  static $static_fields = array();
  if (!isset($static_fields[$module][$type_name][$build_mode])) {

    // Do we have them cached or not ?
    $ds_fields_cached = variable_get('ds_fields_cached', array());
    if (!isset($ds_fields_cached[$module][$type_name][$build_mode]) || $reset) {

      // Fields in code.
      $fields = array();
      foreach (module_implements('ds_fields') as $prefix) {
        $function = $prefix .'_ds_fields';
        $all_fields = $function($type_name, $build_mode, $extra);
        foreach ($all_fields as $key => $field_results) {
          if ($key === $module) {
            $fields = array_merge($field_results, $fields);
          }
        }
      }

      // Fields via the UI.
      $db_fields = variable_get($module .'_fields', array());
      if (!empty($db_fields)) {
        foreach ($db_fields as $key => $field) {
          $fields[$key] = array(
            'title' => check_plain($field['title']),
            'code' => isset($field['block']) ? $field['block'] : $field['code'],
            'type' => $field['type'],
            'render' => isset($field['render']) ? $field['render'] : '',
          );
          $exclude = (isset($field['exclude'][$type_name]) && $field['exclude'][$type_name] === $type_name) ? TRUE : FALSE;
          if ($exclude) {
            unset($fields[$key]);
          }
        }
      }

      // Give modules a change to alter fields.
      drupal_alter('ds_fields', $fields);

      // If we reset, remove the old settings, otherwhise, save the new ones.
      if ($reset) {
        unset($ds_fields_cached[$module][$type_name][$build_mode]);
      }
      else {
        $ds_fields_cached[$module][$type_name][$build_mode] = $fields;
      }
      variable_set('ds_fields_cached', $ds_fields_cached);
    }
    else {
      $fields = $ds_fields_cached[$module][$type_name][$build_mode];
    }

    // Store the fields.
    $static_fields[$module][$type_name][$build_mode] = $fields;
  }

  return $static_fields[$module][$type_name][$build_mode];
}

/**
 * Api function to return all build modes.
 *
 * @param string $module Return build modes for a module.
 * @param boolean $reset Whether to reset the build modes.
 * @return array Collection of build modes.
 */
function ds_get_build_modes($module = NULL, $reset = FALSE) {

  $build_modes = variable_get('ds_all_build_modes', array());

  if (empty($build_modes) || $reset) {
    require_once('includes/ds.registry.inc');
    $build_modes = _ds_register_build_modes();
  }

  if ($module != NULL) {
    return $build_modes[$module];
  }
  else {
    return $build_modes;
  }
}

/**
 * Process plugins.
 *
 * @param string $module The module to process for.
 * @param string $object_type The type of object (node, user, comment).
 * @param array $display_settings Display settings.
 * @param array $vars The variables currently processed.
 * @param stdClass $display Collection of arrays with object data.
 */
function ds_plugins_process($module, $object_type, $display_settings, &$vars, &$display) {
  $plugins = variable_get($module .'_plugin_settings', array());
  if (!empty($plugins)) {
    foreach ($plugins as $key => $plugin) {
      if (isset($plugin['filename'])) {
        require_once($plugin['filename']);
      }
      $function = $plugin['process_callback'];
      $function($vars, $display, $display_settings, $object_type);
    }
  }
}

/**
 * Evaluate custom code.
 *
 * @param string $key The name of the key to create.
 * @param array $value The field array.
 * @param stdClass $object The object.
 * @param string $object_type Type of object for token support.
 */
function ds_eval_code($key, $field, &$object, $object_type) {
  if (isset($field['code'])) {
    $key = $key .'_rendered';
    $value = ds_eval($field['code'], $object);
    // Token support.
    if (module_exists('token')) {
      $value = token_replace($value, $object_type, $object);
    }
    $object->{$key} = $value;
  }
}

/**
 * Evaluate block field.
 *
 * @param string $key The name of the key to create.
 * @param array $field The field array.
 * @param stdClass $object The object on which we'll add new data.
 */
function ds_eval_block($key, $field, &$object) {
  if (isset($field['code'])) {
    list($module, $delta) = explode('|', $field['code']);
    $block = module_invoke($module, 'block', 'view', $delta);
    if (!empty($block)) {
      switch ($field['render']) {
        case BLOCK_TEMPLATE:
          global $theme_key;
          $block = (object) $block;
          $block->module = $module;
          $block->delta = $delta;
          $block_title = db_result(db_query("SELECT title FROM {blocks} WHERE module = '%s' AND delta = '%s' AND theme = '%s'", $module, $delta, $theme_key));
          if (!empty($block_title)) {
            $block->subject = $block_title == '<none>' ? '' : check_plain($block_title);
          }
          $content = theme('block', $block);
          break;
        case BLOCK_TITLE_CONTENT:
          $content = '<h2 class="block-title">'. $block['subject'] .'</h2>';
          $content .= $block['content'];
          break;
        case BLOCK_CONTENT:
          $content = $block['content'];
          break;
      }
      $key = $key .'_rendered';
      $object->{$key} = $content;
    }
  }
}

/**
 * Wrapper function around PHP eval(). We don't use drupal_eval
 * because custom fields might need properties from the current
 * object.
 *
 * @param string $code The code to evaluate from the custom field.
 * @param stdClass $object An object to use for evaluation.
 * @return string $output The output from eval.
 */
function ds_eval($code, $object) {
  global $theme_path, $theme_info, $conf;

  // Store current theme path.
  $old_theme_path = $theme_path;

  // Restore theme_path to the theme, as long as ds_eval() executes,
  // so code evaluted will not see the caller module as the current theme.
  // If theme info is not initialized get the path from theme_default.
  if (!isset($theme_info)) {
    $theme_path = drupal_get_path('theme', $conf['theme_default']);
  }
  else {
    $theme_path = dirname($theme_info->filename);
  }

  ob_start();
  print eval('?>'. $code);
  $output = ob_get_contents();
  ob_end_clean();

  // Recover original theme path.
  $theme_path = $old_theme_path;

  return $output;
}

/**
 * Return array of available regions.
 *
 * This is a multi dimensional array because when ordering fields on the
 * display, we want them to order in a logical order. However, when
 * rendering the HTML, we want left-right-middle for easy css practice.
 *
 * @param string $regions Whether to return all regions or not.
 * @return array $regions Collection of regions.
 */
function ds_regions($regions = 'all', $render = FALSE) {
  if ($regions == 'all') {
    if ($render == FALSE) {
      return array(
        'header' => t('Header'),
        'left' => t('Left'),
        'middle' => t('Middle'),
        'right' => t('Right'),
        'footer' => t('Footer'),
        'disabled' => t('Disabled')
      );
    }
    else {
      return array(
        'header' => t('Header'),
        'left' => t('Left'),
        'right' => t('Right'),
        'middle' => t('Middle'),
        'footer' => t('Footer'),
        'disabled' => t('Disabled'),
      );
    }
  }
  else {
    return array(
      'middle' => t('Enabled'),
      'disabled' => t('Disabled')
    );
  }
}
